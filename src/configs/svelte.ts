import { ensurePackages, interopDefault } from '../shared';
import type { FlatConfigItem, PartialPrettierExtendedOptions, RequiredRuleBaseOptions } from '../types';
import { createTsRules } from './typescript';

export async function createSvelteConfig(
  options?: RequiredRuleBaseOptions,
  prettierRules: PartialPrettierExtendedOptions = {},
  overrides: Record<string, any> = {}
) {
  if (!options) return [];

  const { files } = options;

  await ensurePackages(['eslint-plugin-svelte', 'svelte-eslint-parser', 'prettier-plugin-svelte']);

  const [pluginSvelte, parserSvelte, pluginTs, pluginPrettier] = await Promise.all([
    interopDefault(import('eslint-plugin-svelte')),
    interopDefault(import('svelte-eslint-parser')),
    interopDefault(import('@typescript-eslint/eslint-plugin')),
    interopDefault(import('eslint-plugin-prettier'))
  ]);

  const tsRules = await createTsRules();

  const { plugins = [] } = prettierRules;

  const pRules: PartialPrettierExtendedOptions = {
    ...prettierRules,
    plugins: plugins.concat('prettier-plugin-svelte')
  };

  const configs: FlatConfigItem[] = [
    {
      files,
      languageOptions: {
        parser: parserSvelte,
        parserOptions: {
          extraFileExtensions: ['.svelte'],
          parser: '@typescript-eslint/parser',
          sourceType: 'module'
        }
      },
      plugins: {
        '@typescript-eslint': pluginTs,
        svelte: pluginSvelte,
        prettier: pluginPrettier
      },
      processor: pluginSvelte.processors.svelte,
      rules: {
        ...tsRules,
        // eslint-plugin-svelte rules
        // ESLint core rules known to cause problems with `.svelte`.
        'no-inner-declarations': 'off', // The AST generated by svelte-eslint-parser will false positives in it rule because the root node of the script is not the `Program`.
        // "no-irregular-whitespace": "off",
        // Self assign is one of way to update reactive value in Svelte.
        'no-self-assign': 'off',
        // eslint-plugin-svelte rules
        'svelte/comment-directive': 'error',
        'svelte/system': 'error',
        'svelte/infinite-reactive-loop': 'error',
        'svelte/no-at-debug-tags': 'warn',
        'svelte/no-at-html-tags': 'error',
        'svelte/no-dom-manipulating': 'error',
        'svelte/no-dupe-else-if-blocks': 'error',
        'svelte/no-dupe-on-directives': 'error',
        'svelte/no-dupe-style-properties': 'error',
        'svelte/no-dupe-use-directives': 'error',
        'svelte/no-export-load-in-svelte-module-in-kit-pages': 'error',
        'svelte/no-immutable-reactive-statements': 'error',
        'svelte/no-inner-declarations': 'error',
        'svelte/no-inspect': 'warn',
        'svelte/no-not-function-handler': 'error',
        'svelte/no-object-in-text-mustaches': 'error',
        'svelte/no-raw-special-elements': 'error',
        'svelte/no-reactive-functions': 'error',
        'svelte/no-reactive-literals': 'error',
        'svelte/no-reactive-reassign': 'error',
        'svelte/no-shorthand-style-property-overrides': 'error',
        'svelte/no-store-async': 'error',
        'svelte/no-svelte-internal': 'error',
        'svelte/no-unknown-style-directive-property': 'error',
        'svelte/no-unused-svelte-ignore': 'error',
        'svelte/no-useless-children-snippet': 'error',
        'svelte/no-useless-mustaches': 'error',
        'svelte/require-each-key': 'error',
        'svelte/require-event-dispatcher-types': 'error',
        'svelte/require-store-reactive-access': 'error',
        'svelte/valid-each-key': 'error',
        'svelte/valid-prop-names-in-kit-pages': 'error',
        ...overrides,
        'prettier/prettier': [
          'warn',
          {
            ...pRules,
            parser: 'svelte'
          }
        ]
      }
    }
  ];

  return configs;
}
